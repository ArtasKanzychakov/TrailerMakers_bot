from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from keyboards import admin_menu
from utils.roles import is_admin
from states import ProjectCreation

router = Router()

@router.message(Command("admin"))
async def admin_access(message: types.Message):
    try:
        keyword = message.text.split(" ")[1]
    except IndexError:
        return await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞: /admin <–∫–æ–¥>")

    if keyword == os.getenv("ADMIN_KEYWORD"):
        if is_admin(message.from_user.id):
            await message.answer("‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu())
        else:
            await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")

@router.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç")
async def create_project(message: types.Message, state: FSMContext):
    if not is_admin(message.from_user.id):
        return await message.answer("‚õî –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç.")
    
    await state.set_state(ProjectCreation.name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:")
